목표 : 스프링, MyBatis, 스프링 MVC 모두 결합하는 구조로 구성한다. ==> 서블릿 기반 Todo 웹 서비스 구현!!

서블릿 기반 Todo 웹 서비스 : CRUD 기능 개발 + 목록에 페이징 + 검색 필터링

1. MyBatis 와 스프링을 이용한 영속 처리
    1) VO 선언 - 프로젝트 domain 패키지에 TodoVo 클래스를 구현해주세요
    2) Mapper 인터페이스 - mapper 패키지에 TodoMapper 인터페이스를 만들어주세요
        String getTime(); 선언
    3) XML 개발 - resources/mappers TodoMapper.xml을 선언해주세요
        TodoMapper 인터페이스의 getTime 메서드를 동작하여 현재 시간을 조회할 수 있는 동적 쿼리를 작성해주세요.
    4) 테스트 코드 개발 - 테스트 코드를 작성하여 (TodoMapperTests) getTime 메서드를 테스트하여 현재 시간을 콘솔창에 출력하세요.

2. Todo 기능 개발
    1) 등록작업 처리
        TodoMapper -> TodoService -> TodoController -> JSP
    2) 테스트 코드 개발 - 테스트 코드를 작성하여 (ServiceTests) testRegister 메서드를 테스트하여 글하나(TodoDTO) 생성이 제대로 동작하는지
        콘솔창에 확인하고 데이터베이스 tbl_todo 테이블에 글이 등록되었는지 확인하세요.
        * 테스트 하는거 보면 지금 Mapper가 그전에 DB랑 직접 연결의 역할을 했던 DAO의 역할을 해준다고 생각하고
        Service는 Controller랑 Mapper사이의 로직을 처리하는 것이다.
        그렇다면 테스트는 Mapper 먼저 하고, 그 다음 Mapper를 호출하는 Service도 테스트를 진행하는 것이다.

3. 페이징 처리를 위한 TodoMapper
    1) 글의 수가 많아지면 목록페이지를 가져올 때 문제가 발생할 수 있다.
        --> 데이터베이스에서 많은 시간이 소요
        --> 화면에 가져온 데이터를 출력하는데 많은 시간 소요
    2) 일반적으로 많은 데이터를 보여주는 작업은 페이징 처리를 해서 최소한의 데이터들을 보여주는 방식을 채택한다.
        --> 페이징 처리를 하게 되면 데이터베이스에서 필요한 만큼 최소한의 데이터를 가져온다.
        --> 그리고 이를 출력할때도 출력시간을 최소활 할 수 있다.
        --> 성능개선 효과를 볼 수 있다

4. MariaDB/MySQL에서 페이징 처리를 위해서는 select 마지막 부분에 limit
    1) select * from tbl_todo order by tno desc limit 10;(가져오는 데이터 수)
    2) select * from tbl_todo order by tno desc limit 10;(앞 10 : 건너뛰는 데이터의 수 skip / 뒤 10 : 가져오는 데이터의 수 fetch)
    3) limit의 단점
        --> limit 뒤에 expression을 사용할 수 없다. 값만 줘야한다.(따로 계산식을 만들어줘야 한다)
        --> count() 함수가 필요함 --> 페이징 처리를 위해서는 전테 데이터의 개수가 필요하다. (예시 : 30개면 3페이지만 출력, 31개면 4페이지)

5. 페이지 처리를 위한 DTO
    1) 페이지 처리는 현재 페이지의 번호(page), 한 페이지당 보여주는 데이터의 수(size) 필요

6. TodoMapper의 count처리
    1) 화면에 페이지 번호들을 구성하기 위해서는 전체 데이터들의 수를 알아야 한다.
    2) getCOunt() : 전체 글의 개수 반환하도록 작업

7. 목록 데이터를 위한 DTO와 서비스 계층
    1) TodoMapper에서 TodoVO의 목록과 전체 데이터수를 담을 DTO 객체인 pageRequestDTO를 만든다
    2) pageRequestDTO는 TodoDTO목록 / 전체 데이터 수 / 페이지 번호의 처리를 위한 데이터를(시작 페이지, 끝 페이지 번호)

8. 페이지 번호의 계산(화면에 10개의 페이지 번호를 출력한다고 가정)
    1) page 1 인 경우 : start 1, end 10
    2) page 2 인 경우 : start 1, end 10
    3) page 11인 경우 : start 11, end 20
    4) 마지막 페이지/시작 페이지를 계산 수식
        : end는 현재 페이지 번호를 기준으로 계산 => page를 10으로 나눈 값을 올림처리하고 * 10
        this.end = (int)(Math.ceil(this.page / 10.0))*10
        1/10 = 0..1 => 1 => 10
        this.start = this.end - 9;

    5) 한 페이지에 10개씩 보여주는 경우에 전체 개수가 만약 75라면 마지막 페이지는?
        int last =(int) (Math.ceil(total / (double)size));
    6) 마지막 페이지(end)는 last보다 작은 경우에 last 값이 end가 되야 하므로
        int last =(int) (Math.ceil(total / (double)size));
        this.end = end > last ? last : end;
    7) 이전(prev) / 이후(next) 계산
        이전 페이지가 있는지 존재 여부는 시작 페이지가 1이 아니면 무조건 true가 되게끔 한다.
        이후 페이지는 마지막 페이지(end)와 페이지당 개수(size)를 곱한 값보다 전체 개수가 더 많은지를 보고 판단 수식
        this.prev = this.start > 1;
        this.next = total > this.end * this.size;

9. 브라우저는 특정한 Todo 조회 -> 수정/삭제화면 -> 삭제 -> 조회
10. 검색 기능 개발할때 고려할 사항
    1) 검색 기능의 경우의 수를 구분
        : 검색/필터링의 종류 '완료여부, 제목(t), 작성자(w)' 구분해서 검색의 실제 값은 검색 종류에 따라 키워드(keyword)를 이용한다.
    2) 검색은 목록 시능에 사용하는 PageRequestDTO에 필요한 변수들을 추가해서 구성한다.
        -> types
        -> keyword
        -> finished
        -> to
        변수 추가한다.
    3) types에 따른 동적 쿼리 작성
        -> MyBatis는 실행시에 쿼리를 만들 수 있는 여러 태그를 제공한다.
        : if, trim(where, set), choose(when, otherwise), foreach